import{d as createComponent,r as renderTemplate,m as maybeRenderHead,u as unescapeHTML}from"./astro-CBVvFz9n.js";const html='<h2 id="陣列功能介紹">陣列功能介紹<a class="anchor" href="#陣列功能介紹"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<p>陣列是一種可以儲存多個值的變數，這些值可以是任何型態的資料，例如數字、字串、物件等等。在 JavaScript 中，陣列是一種特殊的物件，可以透過索引值來存取陣列中的元素。</p>\n<h3 id="陣列的建立">陣列的建立<a class="anchor" href="#陣列的建立"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>在 JavaScript 中，可以使用方括號 <code>[]</code> 或 <code>Array</code> 類別來建立陣列。以下是建立陣列的幾種方式：</p>\n<ol>\n<li>使用方括號 <code>[]</code> 建立空陣列：</li>\n</ol>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> emptyArray </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [];</span></span></code></pre>\n<ol start="2">\n<li>使用方括號 <code>[]</code> 建立具有初始值的陣列：</li>\n</ol>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> arrayWithValues </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">];</span></span></code></pre>\n<ol start="3">\n<li>使用 <code>Array</code> 類別建立空陣列：</li>\n</ol>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> emptyArray </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">();</span></span></code></pre>\n<ol start="4">\n<li>使用 <code>Array</code> 類別建立具有初始值的陣列：</li>\n</ol>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> arrayWithValues </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Array</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">);</span></span></code></pre>\n<h3 id="存取陣列元素">存取陣列元素<a class="anchor" href="#存取陣列元素"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>陣列中的元素可以透過索引值來存取。索引值從 0 開始，表示陣列中的第一個元素。以下是存取陣列元素的幾種方式：</p>\n<ol>\n<li>使用方括號 <code>[]</code> 和索引值存取元素：</li>\n</ol>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> array </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(array[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">]); </span><span style="color:#6A737D">// Output: 1</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(array[</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">]); </span><span style="color:#6A737D">// Output: 3</span></span></code></pre>\n<ol start="2">\n<li>使用 <code>Array</code> 類別的 <code>at</code> 方法存取元素：</li>\n</ol>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> array </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">5</span><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(array.</span><span style="color:#B392F0">at</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// Output: 1</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(array.</span><span style="color:#B392F0">at</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">)); </span><span style="color:#6A737D">// Output: 3</span></span></code></pre>\n<h3 id="陣列的常用方法">陣列的常用方法<a class="anchor" href="#陣列的常用方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>JavaScript 提供了許多內建的陣列方法，用於操作和處理陣列。以下是一些常用的陣列方法：</p>\n<ul>\n<li><code>push</code>: 在陣列末尾新增一個或多個元素。</li>\n<li><code>pop</code>: 移除並返回陣列末尾的元素。</li>\n<li><code>shift</code>: 移除並返回陣列開頭的元素。</li>\n<li><code>unshift</code>: 在陣列開頭新增一個或多個元素。</li>\n<li><code>slice</code>: 返回指定範圍內的元素，不會修改原始陣列。</li>\n<li><code>splice</code>: 刪除、替換或新增元素到指定位置。</li>\n<li><code>concat</code>: 合併兩個或多個陣列，返回一個新陣列。</li>\n<li><code>join</code>: 將陣列中的所有元素連接成一個字串。</li>\n<li><code>reverse</code>: 反轉陣列中的元素順序。</li>\n<li><code>sort</code>: 對陣列中的元素進行排序。</li>\n</ul>\n<p>以上只是陣列功能的一小部分，JavaScript 還提供了更多強大的陣列方法和功能。詳細的說明和示例可以參考 JavaScript 的官方文件。</p>',frontmatter={title:"JS 陣列",published:"2024-06-12T00:00:00.000Z",description:"JS 陣列功能介紹",image:"",tags:["Array","JS"],category:"JS",draft:!1,minutes:3,words:533},file="/home/runner/work/astroblog/astroblog/src/content/posts/jspost/js-array.md",url=void 0;function rawContent(){return"\n## 陣列功能介紹\n陣列是一種可以儲存多個值的變數，這些值可以是任何型態的資料，例如數字、字串、物件等等。在 JavaScript 中，陣列是一種特殊的物件，可以透過索引值來存取陣列中的元素。\n\n### 陣列的建立\n在 JavaScript 中，可以使用方括號 `[]` 或 `Array` 類別來建立陣列。以下是建立陣列的幾種方式：\n\n1. 使用方括號 `[]` 建立空陣列：\n```javascript\nlet emptyArray = [];\n```\n\n2. 使用方括號 `[]` 建立具有初始值的陣列：\n```javascript\nlet arrayWithValues = [1, 2, 3, 4, 5];\n```\n\n3. 使用 `Array` 類別建立空陣列：\n```javascript\nlet emptyArray = new Array();\n```\n\n4. 使用 `Array` 類別建立具有初始值的陣列：\n```javascript\nlet arrayWithValues = new Array(1, 2, 3, 4, 5);\n```\n\n### 存取陣列元素\n陣列中的元素可以透過索引值來存取。索引值從 0 開始，表示陣列中的第一個元素。以下是存取陣列元素的幾種方式：\n\n1. 使用方括號 `[]` 和索引值存取元素：\n```javascript\nlet array = [1, 2, 3, 4, 5];\nconsole.log(array[0]); // Output: 1\nconsole.log(array[2]); // Output: 3\n```\n\n2. 使用 `Array` 類別的 `at` 方法存取元素：\n```javascript\nlet array = [1, 2, 3, 4, 5];\nconsole.log(array.at(0)); // Output: 1\nconsole.log(array.at(2)); // Output: 3\n```\n\n### 陣列的常用方法\nJavaScript 提供了許多內建的陣列方法，用於操作和處理陣列。以下是一些常用的陣列方法：\n\n- `push`: 在陣列末尾新增一個或多個元素。\n- `pop`: 移除並返回陣列末尾的元素。\n- `shift`: 移除並返回陣列開頭的元素。\n- `unshift`: 在陣列開頭新增一個或多個元素。\n- `slice`: 返回指定範圍內的元素，不會修改原始陣列。\n- `splice`: 刪除、替換或新增元素到指定位置。\n- `concat`: 合併兩個或多個陣列，返回一個新陣列。\n- `join`: 將陣列中的所有元素連接成一個字串。\n- `reverse`: 反轉陣列中的元素順序。\n- `sort`: 對陣列中的元素進行排序。\n\n以上只是陣列功能的一小部分，JavaScript 還提供了更多強大的陣列方法和功能。詳細的說明和示例可以參考 JavaScript 的官方文件。\n\n"}function compiledContent(){return html}function getHeadings(){return[{depth:2,slug:"陣列功能介紹",text:"陣列功能介紹#"},{depth:3,slug:"陣列的建立",text:"陣列的建立#"},{depth:3,slug:"存取陣列元素",text:"存取陣列元素#"},{depth:3,slug:"陣列的常用方法",text:"陣列的常用方法#"}]}const Content=createComponent(((s,n,a)=>{const{layout:o,...l}=frontmatter;return l.file=file,l.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};